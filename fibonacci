        lw          0           1           n           #   input n
main    lw          0           6           neg1        #   temp = -1
        add         6           1           1
        lw          0           6           fibAdr      #   fibo address
        jalr        6           7
        lw          0           6           pos1        #   tmep = 1
        add         6           1           1
done    halt
fibo    lw          0           6           pos1        #   temporary = 1  ; pos = positive
        sw          5           7           stack       #   save return address($7) on stack
        add         5           6           5           #   increment stack pointer
        sw          5           1           stack       #   save ($n), the 'n' on stack
        add         5           6           5           #   increment stack pointer
        sw          5           4           stack       #   save ($4), the local variable of the function on stack
        add         5           6           5           #   increment stack pointer
        beq         1           6           3           #   check if n == 1 or not? If yes return (1)   12+1+3 == 16
        beq         1           0           4           #   check if n == 0 or not? If yes return (0)   13+1+4 == 18
        lw          0           6           elseAd      #   load else address
        jalr        6           0                       #   return to caller
        lw          0           6           ret1        #   load return 1 address
        jalr        6           0                       #   return 1 to caller
        lw          0           6           ret0        #   load return 1 address
        jalr        6           0                       #   return 1 to caller
else    lw          0           6           neg1        #   temporary = -1
        add         1           6           1           #   n = n - 1
        lw          0           6           fibAdr      #   load fibo address
        jalr        6           7                       #   return to caller (recursive call fib(n-1))
        add         0           3           4           #   product of fib(n-1)
        lw          0           6           neg1        #   temporary = -1
        add         1           6           1           #   n = n - 2
        lw          0           6           fibAdr      #   load fibo address
        jalr        6           7                       #   recursive call (fib(n-2))
        add         3           4           3           #   product of fibo(n-1) + fibo(n-2)
        lw          0           6           popAdd      #   load pop address
        jalr        6           0                       #   jump to pop label
re1     lw          0           3           pos1        #   $3 = 1 (base case return 1 for fibo(1))
re0     lw          0           3           pos1        #   $3 = 1 (base case return 1 for fibo(0))
pop     lw          0           6           neg1        #   temporary = -1
        add         5           6           5           #   decrement stack pointer
        lw          5           4           stack       #   load ($4), the local variable of the function on stack
        add         5           6           5           #   decrement stack pointer
        lw          5           1           stack       #   load ($n), the 'n' on stack
        add         5           6           5           #   decrement stack pointer
        lw          5           7           stack       #   load return address($7) on stack
        jalr        7           0                       #   return fibo(n-1) + fibo(n-2) OR return 1
ret1        .fill   re1
ret0        .fill   re0
elseAd      .fill   else
popAdd      .fill   pop
fibAdr      .fill   fibo
n           .fill   10
neg1        .fill   -1
zero        .fill   0
pos1        .fill   1
stack       .fill   0